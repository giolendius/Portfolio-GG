{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8127551,"sourceType":"datasetVersion","datasetId":4803485}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression as LR\nimport sklearn.model_selection as ms\nfrom sklearn import preprocessing\nfrom sklearn.metrics import accuracy_score\nimport time","metadata":{"execution":{"iopub.status.busy":"2024-05-08T10:41:39.849941Z","iopub.execute_input":"2024-05-08T10:41:39.850395Z","iopub.status.idle":"2024-05-08T10:41:39.856384Z","shell.execute_reply.started":"2024-05-08T10:41:39.850333Z","shell.execute_reply":"2024-05-08T10:41:39.855281Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Preliminary Analisys\n\nWe import the League of Legends database, check for null values, and plot correlations in order to understand which features are more useful in order to predict Victory for Blue or Red team","metadata":{}},{"cell_type":"code","source":"df=pd.read_csv(\"/kaggle/input/match-data-v5-with-headers-csv/match_data_v5_with_column.csv\")\ndf=df.drop(['Unnamed: 29'], axis=1).set_index(\"matchId\")\nprint(\"Dataset contains {} NaN values\".format(df.isnull().values.sum()))","metadata":{"execution":{"iopub.status.busy":"2024-05-08T10:41:39.858607Z","iopub.execute_input":"2024-05-08T10:41:39.859400Z","iopub.status.idle":"2024-05-08T10:41:39.960078Z","shell.execute_reply.started":"2024-05-08T10:41:39.859347Z","shell.execute_reply":"2024-05-08T10:41:39.958958Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\ncorre = df.corr()[[\"blueWin\"]].sort_values(\"blueWin\", ascending = False)[1:]\nsns.heatmap(corre, cmap=\"seismic\", yticklabels= 1, xticklabels= 0).set_title(\"Correlation values with BlueWin:\\n\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-08T10:41:39.962181Z","iopub.execute_input":"2024-05-08T10:41:39.962822Z","iopub.status.idle":"2024-05-08T10:41:40.498547Z","shell.execute_reply.started":"2024-05-08T10:41:39.962786Z","shell.execute_reply":"2024-05-08T10:41:40.497535Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We checked for correlation in the dataset.\nWe examining the results and exclude immediately the features with low correlation. Knowing that the \"minions\", \"jgl camps\" and \"kills\" are variables which all only leads to advantage for \"gold\" ad \"XP\" columns, we further reduce the database","metadata":{}},{"cell_type":"code","source":"df=df[['blueTeamDragonKills', 'blueTeamTowersDestroyed',\n       'blueTeamInhibitorsDestroyed', 'blueTeamTotalGold','blueTeamXp',\n       'redTeamDragonKills', 'redTeamTowersDestroyed',\n       'redTeamInhibitorsDestroyed','redTeamTotalGold','redTeamXp', \n       'blueTeamFirstBlood','blueWin']]","metadata":{"execution":{"iopub.status.busy":"2024-05-08T10:41:40.500029Z","iopub.execute_input":"2024-05-08T10:41:40.500631Z","iopub.status.idle":"2024-05-08T10:41:40.507814Z","shell.execute_reply.started":"2024-05-08T10:41:40.500598Z","shell.execute_reply":"2024-05-08T10:41:40.506791Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We can furthermore create a new database where we keep only the difference between the teams of the variables","metadata":{}},{"cell_type":"code","source":"dfdiff=pd.DataFrame({f\"{df.columns[x][8:]} Diff\":df.iloc[:,x]-df.iloc[:,5+x] for x in range(5)}).assign(blueFirstBlood=df['blueTeamFirstBlood'],blueWin=df[\"blueWin\"])\ndfdiff.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-08T10:41:40.510590Z","iopub.execute_input":"2024-05-08T10:41:40.511194Z","iopub.status.idle":"2024-05-08T10:41:40.535199Z","shell.execute_reply.started":"2024-05-08T10:41:40.511159Z","shell.execute_reply":"2024-05-08T10:41:40.534162Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"first_blood_and_win=((df['blueTeamFirstBlood']==1) ^ (df[\"blueWin\"]==0)).sum()\nprint(f\"A curiosity: in only {round(first_blood_and_win/len(df) *100,2)}% of all matches the team which had first blood (i.e. the first kill which gives a little advantage mostly psycological) actually won the match\")","metadata":{"execution":{"iopub.status.busy":"2024-05-08T10:41:40.536944Z","iopub.execute_input":"2024-05-08T10:41:40.537370Z","iopub.status.idle":"2024-05-08T10:41:40.544451Z","shell.execute_reply.started":"2024-05-08T10:41:40.537315Z","shell.execute_reply":"2024-05-08T10:41:40.543424Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"I define a function to ","metadata":{}},{"cell_type":"code","source":"def machine_learning(database, model_to_use, pca = False, use_scaler = False, print_tree=False):\n    X = database.iloc[:,:-1]\n    y = database.iloc[:,[-1]]\n    Xtr, Xte, ytr, yte = ms.train_test_split(X,y, test_size=0.2)\n    \n    if use_scaler:\n        scaler = preprocessing.StandardScaler()\n        scaler=scaler.fit(Xtr)\n        Xtr=scaler.transform(Xtr)\n        Xte=scaler.transform(Xte)\n        \n    cv_score=ms.cross_val_score(model_to_use, X, y.values.ravel(), cv=5).mean()\n    \n    if pca != False:\n        pca.fit(Xtr)\n        Xtr=pca.transform(Xtr)\n        Xte=pca.transform(Xte)\n        \n    t1 = time.time()\n    modello=model_to_use\n    modello=modello.fit(Xtr,ytr.values.ravel())\n    y_pred_train =modello.predict(Xtr)\n    score_train=accuracy_score(ytr, y_pred_train)\n    t2 = time.time()\n    y_pred_test = modello.predict(Xte)\n    t3=time.time()\n    score_test=accuracy_score(yte, y_pred_test)\n    if print_tree:\n        tree.plot_tree(modello, fontsize=7, feature_names=list(database.columns))\n    print(f\"\"\"With {model_to_use}, Cross Validation gives average accuracy of {cv_score}.\n          \\naccuracy on train set {score_train}\n          \\naccuracy on test set {score_test}\n          \\nwith fitting time {t2-t1} and prediction time {t3-t2}\"\"\")\n    ","metadata":{"execution":{"iopub.status.busy":"2024-05-08T10:52:57.773640Z","iopub.execute_input":"2024-05-08T10:52:57.774012Z","iopub.status.idle":"2024-05-08T10:52:57.783681Z","shell.execute_reply.started":"2024-05-08T10:52:57.773986Z","shell.execute_reply":"2024-05-08T10:52:57.782550Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# First Model: Logistic regression\n\nWe normalize data and apply LR","metadata":{}},{"cell_type":"code","source":"machine_learning(df,LR(), use_scaler=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T10:41:40.558971Z","iopub.execute_input":"2024-05-08T10:41:40.559938Z","iopub.status.idle":"2024-05-08T10:41:41.089117Z","shell.execute_reply.started":"2024-05-08T10:41:40.559908Z","shell.execute_reply":"2024-05-08T10:41:41.087987Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"machine_learning(dfdiff,LR(), use_scaler=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T10:41:41.090715Z","iopub.execute_input":"2024-05-08T10:41:41.091348Z","iopub.status.idle":"2024-05-08T10:41:41.692905Z","shell.execute_reply.started":"2024-05-08T10:41:41.091310Z","shell.execute_reply":"2024-05-08T10:41:41.691891Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Second Model: Decision Trees","metadata":{}},{"cell_type":"code","source":"from sklearn import tree\nfrom sklearn.decomposition import PCA\n\nmachine_learning(dfdiff,tree.DecisionTreeClassifier(max_depth =4), print_tree=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T10:56:02.648700Z","iopub.execute_input":"2024-05-08T10:56:02.649461Z","iopub.status.idle":"2024-05-08T10:56:04.120511Z","shell.execute_reply.started":"2024-05-08T10:56:02.649422Z","shell.execute_reply":"2024-05-08T10:56:04.119448Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"machine_learning(df,tree.DecisionTreeClassifier(max_depth =4), pca= PCA(n_components= 0.5))","metadata":{"execution":{"iopub.status.busy":"2024-05-08T10:55:43.467268Z","iopub.execute_input":"2024-05-08T10:55:43.467588Z","iopub.status.idle":"2024-05-08T10:55:45.104624Z","shell.execute_reply.started":"2024-05-08T10:55:43.467561Z","shell.execute_reply":"2024-05-08T10:55:45.103810Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"machine_learning(dfdiff,tree.DecisionTreeClassifier(max_depth =4), pca= PCA(n_components= 0.5))","metadata":{"execution":{"iopub.status.busy":"2024-05-08T10:56:44.227076Z","iopub.execute_input":"2024-05-08T10:56:44.227497Z","iopub.status.idle":"2024-05-08T10:56:44.484978Z","shell.execute_reply.started":"2024-05-08T10:56:44.227468Z","shell.execute_reply":"2024-05-08T10:56:44.483731Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Improving Result\n\nCould bagging or boosting improve performances? We'll test it out","metadata":{}}]}